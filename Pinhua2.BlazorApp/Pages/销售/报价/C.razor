@page "/销售/报价/新增"
@using Piuhua2.Components.Modal

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center mb-3">
    <h3>新增</h3>
</div>
<KForm Model="main">
    <div class="row">
        <div class="col-12">
            <div class="row">
                <div class="col-md-6">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <KFormGroupContainer LabelCol="3" LabelAlign="LabelAlign.Right" InputReadonly="true">
                        <KFormGroup Label="@nameof(main.单号)">
                            <KInputText @bind-Value="main.单号" Placeholder="自动生成 ..."></KInputText>
                        </KFormGroup>
                        <KFormGroup Label="客户">
                            <KInputSelect @bind-Value="main.往来号">
                                @foreach (var customer in pinhuaContext.DropdownOptions_客户())
                                {
                                <option value="@customer.Value">@customer.Text</option>
                                }
                            </KInputSelect>
                        </KFormGroup>
                        <KFormGroup Label="@nameof(main.日期)">
                            <KInputDatePicker @bind-Value="main.日期" Format="yyyy-MM-dd" Placeholder="选择日期 ..."></KInputDatePicker>
                        </KFormGroup>
                        <KFormGroup Label="@nameof(main.交期)">
                            <KInputDatePicker @bind-Value="main.交期" Format="yyyy-MM-dd" Placeholder="选择日期 ..."></KInputDatePicker>
                        </KFormGroup>
                        <KFormGroup Label="@nameof(main.备注)">
                            <KInputText @bind-Value="main.备注" Readonly="false"></KInputText>
                        </KFormGroup>
                    </KFormGroupContainer>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="float-right mb-3">
                <button type="button" class="btn btn-primary" @onclick="@(e => Modal_商品列表?.Show())">添加商品</button>
            </div>
        </div>
    </div>
    @{
        Expression<Func<ReflectedCell<dto销售报价D>, bool>> predicate = m =>
        m.Model.Field.IsSystemField ||
        m.Model.Field.IsHiddenField ||
        m.Model.Field.Name == nameof(dto销售报价D.子单号);
    }
    <div class="row">
        <div class="col-12">
            <KTable DataSource="quoteDetails" IsResponsive="true" IsBordered=" true" IsTextNoWrap="true" @ref="DetailsTable"
                    CheckBoxHeader="true" IsSingleSelect="true" IsClickToSelect="true">
                <KTableConditionContainer TItem="dto销售报价D">
                    <KTableHiddenCondition TItem="dto销售报价D" Predicate="predicate"></KTableHiddenCondition>
                    <KTableFormatCondition TItem="dto销售报价D" Predicate="m=>m.Model.IsDatetime" ValueType="KTableValueType.DateTime" ValueFormat="yyyy-MM-dd"></KTableFormatCondition>
                    <KTableFormatCondition TItem="dto销售报价D" Predicate="m=>m.Model.IsDecimal" ValueType="KTableValueType.Decimal" ValueFormat="0.00"></KTableFormatCondition>
                </KTableConditionContainer>
                <KTableUserColumns TItem="dto销售报价D">
                    <KTableUserColumn TItem="dto销售报价D" Width="1" Context="thisRow">
                        <a href="javascript:;" class="mr-1" @onclick="e=>DetailsTable.Remove(thisRow)">移除</a>
                        <a href="javascript:;" @onclick="e=>Editing(thisRow)">修改</a>
                    </KTableUserColumn>
                </KTableUserColumns>
            </KTable>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <Modal_商品列表 @ref="Modal_商品列表" OnOK="e=>OKOK(e.SelectedProducts.ToList())"></Modal_商品列表>
            <Modal_修改销售报价明细 DataSource="editingQuoteDetail" @ref="Modal_修改销售报价明细"></Modal_修改销售报价明细>
        </div>
    </div>
    <button type="submit" class="btn btn-primary">保存</button>
</KForm>

@code {

    private string ABC = "ABC";

    private void HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
    }

    protected dto销售报价 main = new dto销售报价();
    protected List<dto销售报价D> quoteDetails { get; set; }
    protected List<dto商品> products { get; set; }

    protected dto销售报价D editingQuoteDetail { get; set; } = new dto销售报价D();
    protected dto销售报价D editingQuoteDetailBak { get; set; } = new dto销售报价D();

    protected KTable<dto销售报价D> DetailsTable;
    protected KTable<dto商品> ProductTable;

    protected Modal_修改销售报价明细 Modal_修改销售报价明细;
    protected Modal_商品列表 Modal_商品列表;

    protected override void OnInitialized()
    {
        quoteDetails = new List<dto销售报价D>();
        products = mapper.ProjectTo<dto商品>(pinhuaContext.tb_商品表).ToList();
    }

    protected void OKOK(List<dto商品> items)
    {
        var list = new List<dto销售报价D>();
        foreach (var item in items)
        {

            var tb_product = mapper.Map<dto商品, tb_商品表>(item);
            var dto_detail = mapper.Map<tb_商品表, dto销售报价D>(tb_product);

            quoteDetails.Add(dto_detail);
        }
    }

    protected void OKOK2()
    {
        editingQuoteDetail = Newtonsoft.Json.JsonConvert.DeserializeObject<dto销售报价D>(Newtonsoft.Json.JsonConvert.SerializeObject(editingQuoteDetailBak)); ;
        StateHasChanged();
    }

    protected void Editing(dto销售报价D item)
    {
        editingQuoteDetail = item;
        Modal_修改销售报价明细?.Show();
    }
}