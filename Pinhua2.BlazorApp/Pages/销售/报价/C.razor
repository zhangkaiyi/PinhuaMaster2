@page "/销售/报价/新增"
@using Piuhua2.Components.Modal

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center mb-3">
    <h3>新增</h3>
</div>
<EditForm Model="main">
    <div class="row">
        <div class="col-12">
            <div class="row">
                <div class="col-md-6">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    @foreach (var model in MyAnnotations.Parse(main).Where(m => !m.Field.IsSystemField))
                    {
                        <div class="form-group row @(model.Field.IsHidden?"d-none":"")">
                            <label for="@model.Field.Name" class="col-3 col-form-label">@model.Field.ProcessedName</label>
                            <div class="col-9 col-md-9 col-lg-9">
                                @if (model.IsDatetime)
                                {
                                    <KDatePicker Model="model" Format="yyyy-MM-dd" Placeholder="输入日期 ..."></KDatePicker>
                                }
                                else if (model.IsDecimal)
                                {
                                    <input type="number" @bind="model.Field.ValueString" id="@model.Field.Name" class="form-control" />
                                }
                                else if (model.FormControl.IsDropdown)
                                {
                                    <KDropdown Model="model" Placeholder="请选择 ...">
                                        @if (model.Field.Name == "往来号")
                                        {
                                            foreach (var customer in pinhuaContext.DropdownOptions_客户())
                                            {
                                                <KDropdownOption Value="@customer.Value" Text="@customer.Text"></KDropdownOption>
                                            }
                                        }
                                    </KDropdown>
                                }
                                else
                                {
                                    <KInput Model="model" Readonly="true">
                                        <KInputExpression Condition="@(e=>e.Model.Field.Name == "备注")" Action="@(e => e.Input.Set(nameof(e.Input.Readonly), false))" />
                                        <KInputExpression Condition="@(e=>e.Model.Field.Name == "往来号")" Action="@(e => e.Input.Set(nameof(e.Input.Readonly), false))" />
                                    </KInput>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="float-right mb-3">
                <button type="button" class="btn btn-primary" @onclick="@(e => Modal_商品列表?.Show())">添加商品</button>
            </div>
        </div>
    </div>
    @{
        Expression<Func<ReflectedCell<dto销售报价D>, bool>> predicate = m =>
        m.Model.IsSysColumn ||
        m.Model.IsHiddenRef ||
        m.Model.RawName == nameof(dto销售报价D.子单号);
    }
    <div class="row">
        <div class="col-12">
            <KTable DataSource="quoteDetails" IsResponsive="true" IsBordered=" true" IsTextNoWrap="true" @ref="DetailsTable"
                    CheckBoxHeader="true" IsSingleSelect="true" IsClickToSelect="true">
                <KTableConditionContainer TItem="dto销售报价D">
                    <KTableHiddenCondition TItem="dto销售报价D" Predicate="predicate"></KTableHiddenCondition>
                    <KTableFormatCondition TItem="dto销售报价D" Predicate="m=>m.Model.IsDatetime" ValueType="KTableValueType.DateTime" ValueFormat="yyyy-MM-dd"></KTableFormatCondition>
                    <KTableFormatCondition TItem="dto销售报价D" Predicate="m=>m.Model.IsDecimal" ValueType="KTableValueType.Decimal" ValueFormat="0.00"></KTableFormatCondition>
                </KTableConditionContainer>
                <KTableUserColumns TItem="dto销售报价D">
                    <KTableUserColumn TItem="dto销售报价D" Width="1" Context="thisRow">
                        <a href="javascript:;" class="mr-1" @onclick="e=>DetailsTable.Remove(thisRow)">移除</a>
                        <a href="javascript:;" @onclick="e=>Editing(thisRow)">修改</a>
                    </KTableUserColumn>
                </KTableUserColumns>
            </KTable>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <Modal_商品列表 @ref="Modal_商品列表" OnOK="e=>OKOK(e.SelectedProducts.ToList())"></Modal_商品列表>
            <Modal_修改销售报价明细 Datasource="editingQuoteDetail" @ref="Modal_修改销售报价明细"></Modal_修改销售报价明细>
        </div>
    </div>
    <button type="submit" class="btn btn-primary">保存</button>
</EditForm>

@code {

    private void HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
    }

    protected dto销售报价 main = new dto销售报价();
    protected List<dto销售报价D> quoteDetails { get; set; }
    protected List<dto商品> products { get; set; }

    protected dto销售报价D editingQuoteDetail { get; set; } = new dto销售报价D();
    protected dto销售报价D editingQuoteDetailBak { get; set; } = new dto销售报价D();

    protected KTable<dto销售报价D> DetailsTable;
    protected KTable<dto商品> ProductTable;

    protected Modal_修改销售报价明细 Modal_修改销售报价明细;
    protected Modal_商品列表 Modal_商品列表;

    protected override void OnInitialized()
    {
        quoteDetails = new List<dto销售报价D>();
        products = mapper.ProjectTo<dto商品>(pinhuaContext.tb_商品表).ToList();
    }

    protected void OKOK(List<dto商品> items)
    {
        var list = new List<dto销售报价D>();
        foreach (var item in items)
        {

            var tb_product = mapper.Map<dto商品, tb_商品表>(item);
            var dto_detail = mapper.Map<tb_商品表, dto销售报价D>(tb_product);

            quoteDetails.Add(dto_detail);
        }
    }

    protected void OKOK2()
    {
        editingQuoteDetail = Newtonsoft.Json.JsonConvert.DeserializeObject<dto销售报价D>(Newtonsoft.Json.JsonConvert.SerializeObject(editingQuoteDetailBak)); ;
        StateHasChanged();
    }

    protected void Editing(dto销售报价D item)
    {
        editingQuoteDetail = item;
        Modal_修改销售报价明细?.Show();
    }
}