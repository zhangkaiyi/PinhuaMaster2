@inherits ComponentBase
@typeparam TRow
@if (Headers.Any())
{
    var styles = new List<string>();
    var tableClsList = new List<string>();
    tableClsList.Add("table");
    if (IsHover)
    {
        tableClsList.Add("table-hover");
    }
    if (IsStripe)
    {
        tableClsList.Add("table-striped");
    }
    if (IsBordered)
    {
        tableClsList.Add("table-bordered");
    }
    if (IsTextNoWrap)
    {
        tableClsList.Add("text-nowrap");
    }

    styles.Add("width:100%");
    if (Height > 0)
    {
        //tableClsList.Add("el-table--scrollable-y");
        //styles.Add("height:" + Height + "px");
    }

    <div style="@string.Join(";",styles)" @ref="Container" class="">
        <div class="" @ref="headerElement">
            <div class="@(IsResponsive?"table-responsive":"")">
                <table cellspacing="0" cellpadding="0" border="0" class="@string.Join(" ",tableClsList)">
                    <colgroup>
                        @for (int i = 1; i <= Headers.Count; i++)
                        {
                            var header = Headers.ElementAt(i - 1);
                            var width = header.Width;
                            if (header.IsCheckBox)
                            {
                                width = 1;
                            }
                            <col name="my-table_1_column_@i" width="@width" />
                        }
                        <col name="gutter" width="0" />
                    </colgroup>
                    <thead class="">
                        <tr class="">
                            @for (int i = 1; i <= Headers.Count; i++)
                            {
                                var header = Headers.ElementAt(i - 1);
                                <th colspan="1" rowspan="1" class="my-table_1_column_@i  @(header.IsCheckBox?"bs-checkbox":"")">
                                    <div class="">
                                        @if (header.IsCheckBox)
                                        {
                                            <BSimpleCheckBox TValue="Boolean" Status="selectAllStatus" StatusChanged="ChangeAllStatus"></BSimpleCheckBox>
                                        }
                                        else
                                        {
                                            @header.Text
                                        }
                                    </div>
                                </th>
                            }
                            <th class="gutter" style="width: 0px; display: none;"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < DataSource.Count; i++)
                        {
                            var clsList = new List<string>();
                            var row = DataSource.ElementAt(i);
                            <tr class="@string.Join(" ",clsList)">
                                @for (int j = 1; j <= Headers.Count; j++)
                                {
                                    var header = Headers.ElementAt(j - 1);
                                    <td rowspan="1" colspan="1" class="my-table_1_column_@j @(header.IsCheckBox?"bs-checkbox":"")">
                                        @if (header.IsCheckBox)
                                        {
                                            <BSimpleCheckBox TValue="Boolean" Status="SelectedRows.Contains(row) ? Status.Checked: Status.UnChecked" StatusChanged="(status=>ChangeRowStatus(status,row))"></BSimpleCheckBox>
                                        }
                                        else if (header.Template != null)
                                        {
                                            @header.Template(row)
                                        }
                                        else if (header.Eval != null)
                                        {
                                            @header.Eval(row)
                                        }
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        @*<div style="margin-top:20px;margin-bottom:20px;">
                <BPagination Total="Total" PageSize="PageSize" @bind-CurrentPage="CurrentPage"></BPagination>
            </div>*@
    </div>
}
else
{
    <CascadingValue Value="@this">
        @ChildContent
    </CascadingValue>
}