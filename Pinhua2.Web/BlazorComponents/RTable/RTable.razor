@inherits ComponentBase
@typeparam TRow
@if (DataSource.Any())
{
    var styles = new List<string>();
    var tableClsList = new List<string>();
    tableClsList.Add("table");
    if (IsHover)
    {
        tableClsList.Add("table-hover");
    }
    if (IsStripe)
    {
        tableClsList.Add("table-striped");
    }
    if (IsBordered)
    {
        tableClsList.Add("table-bordered");
    }
    if (IsTextNoWrap)
    {
        tableClsList.Add("text-nowrap");
    }

    styles.Add("width:100%");
    if (Height > 0)
    {
        styles.Add("height:" + Height + "px");
    }
    <CascadingValue Value="@this">
        @ChildContent

        <div style="@string.Join(";",styles)" @ref="Container" class="@(visible?"":"d-none")">
            <div class="@(IsResponsive ? "table-responsive" : "")">
                <table cellspacing="0" cellpadding="0" border="0" class="@string.Join(" ", tableClsList)">
                    <colgroup>
                        @if (CheckBoxHeader)
                        {
                            <col name="auto_column_checkbox" width="1" />
                        }
                        @*@for (int i = 1; i <= UserColumns.Count; i++)
                            {
                                var header = UserColumns.ElementAt(i - 1);
                                var width = header.Width;
                                if (header.IsCheckBox)
                                {
                                    width = 1;
                                }
                                <col name="user_column_@i" width="@width" />
                            }*@
                        @foreach (var userColumn in UserColumns)
                        {
                            var width = userColumn.Width;
                            if (userColumn.IsCheckBox)
                            {
                                width = 1;
                            }
                            <col name="user_column_@(UserColumns.IndexOf(userColumn)+1)" width="@width" />
                        }
                        @*@for (int i = 0; i != AutoColumns[0].Count; i++)
                            {
                                var mm = AutoColumns[0].ElementAt(i);
                                if (mm.IsHidden) { }
                                <col name="auto_column_@i" class="@(mm.IsHidden ? "d-none" : "")" />
                            }*@
                        @*@if (AutoColumns.Any())
                        {
                            @foreach (var cfg in AutoColumns[0])
                            {
                                <col name="auto_column_@(AutoColumns[0].IndexOf(cfg)+1)" class="@(cfg.IsHidden ? "d-none" : "")" />
                            }
                        }*@
                        @if (ReflectionData.Rows.Any())
                        {
                            var rRow = ReflectionData.Rows[0];
                            if (rRow.Cells.Any())
                            {
                                @foreach (var rCell in rRow.Cells)
                                {
                                    <col name="auto_column_@(rRow.Cells.IndexOf(rCell)+1)" class="@(rCell.IsHidden ? "d-none" : "")" />
                                }
                            }
                        }
                    </colgroup>
                    <thead class="">
                        <tr class="">
                            @if (CheckBoxHeader)
                            {
                                <th class="auto_column_checkbox bs-checkbox">
                                    @if (!IsSingleSelect)
                                    {
                                        <BSimpleCheckBox TValue="Boolean" Status="selectAllStatus" StatusChanged="ChangeAllStatus"></BSimpleCheckBox>
                                    }
                                </th>
                            }
                            @foreach (var userColumn in UserColumns)
                            {
                                <th colspan="1" rowspan="1" class="user_column_@(UserColumns.IndexOf(userColumn)+1) @(userColumn.IsCheckBox ? "bs-checkbox" : "")">
                                    <div class="">
                                        @if (userColumn.IsCheckBox)
                                        {
                                            if (!IsSingleSelect)
                                            {
                                                <BSimpleCheckBox TValue="Boolean" Status="selectAllStatus" StatusChanged="ChangeAllStatus"></BSimpleCheckBox>
                                            }
                                        }
                                        else
                                        {
                                            @userColumn.Text
                                        }
                                    </div>
                                </th>
                            }
                            @*@if (AutoColumns.Any())
                            {
                                @foreach (var cfg in AutoColumns[0])
                                {
                                    <th colspan="1" rowspan="1" class="auto_column_@(AutoColumns[0].IndexOf(cfg)) @(cfg.IsHidden ? "d-none" : "")">
                                        <div class="">
                                            @cfg.Model.RawName
                                        </div>
                                    </th>
                                }
                            }*@
                            @if (ReflectionData.Rows.Any())
                            {
                                var rRow = ReflectionData.Rows[0];
                                if (rRow.Cells.Any())
                                {
                                    @foreach (var rCell in rRow.Cells)
                                    {
                                        <th colspan="1" rowspan="1" class="auto_column_@(rRow.Cells.IndexOf(rCell)) @(rCell.IsHidden ? "d-none" : "")">
                                            <div class="">
                                                @rCell.Model.RawName
                                            </div>
                                        </th>
                                    }
                                }
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var row in DataSource)
                        {
                            var clsList = new List<string>();
                        <tr class="@string.Join(" ", clsList)" @onclick="e => RowClicked(row)">
                            @if (CheckBoxHeader)
                            {
                                <td class="auto_column_checkbox">
                                    <BSimpleCheckBox TValue="Boolean" Status="SelectedRows.Contains(row) ? Status.Checked : Status.UnChecked" StatusChanged="(status => ChangeRowStatus(status, row))" stopPropagationOnClick="IsClickToSelect"></BSimpleCheckBox>
                                </td>
                            }
                            @foreach (var userColumn in UserColumns)
                            {
                                <td rowspan="1" colspan="1" class="user_column_@(UserColumns.IndexOf(userColumn)+1) @(userColumn.IsCheckBox ? "bs-checkbox" : "")">
                                    @if (userColumn.IsCheckBox)
                                    {
                                        <BSimpleCheckBox TValue="Boolean" Status="SelectedRows.Contains(row) ? Status.Checked : Status.UnChecked" StatusChanged="(status => ChangeRowStatus(status, row))" stopPropagationOnClick="IsClickToSelect"></BSimpleCheckBox>
                                    }
                                    else if (userColumn.Template != null)
                                    {
                                        @userColumn.Template(row)
                                    }
                                    else if (userColumn.Eval != null)
                                    {
                                        @userColumn.Eval(row)
                                    }
                                </td>
                            }
                            @*@foreach (var cfg in AutoColumns[DataSource.IndexOf(row)])
                            {
                                var cls = new List<string>();
                                if (cfg.IsHidden)
                                {
                                    cls.Add("d-none");
                                }
                                <td rowspan="1" colspan="1" class="auto_column_@(AutoColumns[DataSource.IndexOf(row)].IndexOf(cfg)+1) @string.Join("", cls)">
                                    @if (cfg.ColumnType == ColumnType.Text)
                                    {
                                        @cfg.Model.RawValue
                                    }
                                    else if (cfg.ColumnType == ColumnType.DateTime)
                                    {
                                        if (DateTime.TryParse(cfg.Model.RawValue.ToString(), out var result))
                                        {
                                            @result.ToString(cfg.ColumnFormat);
                                        }
                                    }
                                    else if (cfg.ColumnType == ColumnType.Decimal)
                                    {
                                        if (decimal.TryParse(cfg.Model.RawValue?.ToString(), out var result))
                                        {
                                            @result.ToString(cfg.ColumnFormat);
                                        }
                                    }

                                </td>
                            }*@
                            @foreach (var rCell in ReflectionData.Rows[DataSource.IndexOf(row)].Cells)
                            {
                                var cls = new List<string>();
                                if (rCell.IsHidden)
                                {
                                    cls.Add("d-none");
                                }
                                <td rowspan="1" colspan="1" class="auto_column_@(ReflectionData.Rows[DataSource.IndexOf(row)].Cells.IndexOf(rCell)+1) @string.Join("", cls)">
                                    @if (rCell.ValueType == RTableValueType.Text)
                                    {
                                        @rCell.Model.RawValue
                                    }
                                    else if (rCell.ValueType == RTableValueType.DateTime)
                                    {
                                        if (DateTime.TryParse(rCell.Model.RawValue.ToString(), out var result))
                                        {
                                            @result.ToString(rCell.ValueFormat);
                                        }
                                    }
                                    else if (rCell.ValueType == RTableValueType.Decimal)
                                    {
                                        if (decimal.TryParse(rCell.Model.RawValue?.ToString(), out var result))
                                        {
                                            @result.ToString(rCell.ValueFormat);
                                        }
                                    }

                                </td>
                            }
                        </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <button class="btn btn-primary" @onclick="x=> { Add(DataSource[1]); }">Add</button>
        <button class="btn btn-primary" @onclick="x=> RTableConfigCreate()">All</button>
    </CascadingValue>
}